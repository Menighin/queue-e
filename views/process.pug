extends layout

block content
    .process-page(id = `p-${process.id}`)
        .title
            h1= process.name
            .downloads
                a(href=`/process/downloadInput?id=${process.id}&name=${process.name}`)
                    i.fa.fa-download
                    span  Input

                if process.status !== 'running' && process.status !== 'pending' && process.status !== 'canceled'
                    a(href=`/process/downloadLog?id=${process.id}&name=${process.name}`)
                        i.fa.fa-download
                        span  Output

                a(href=`/process/downloadLog?id=${process.id}&name=${process.name}`)
                    i.fa.fa-download
                    span  Log

        .info
            .progress-wrapper
                ol.progress
            
            .progress-history(class = process.status !== 'running' && process.status !== 'pending' ? 'active' : '')
                if process.status !== 'running' && process.status !== 'pending'
                    - var totalMili = process.finishedOn - process.progressHistory[0].timestamp
                    - var start = new Date(process.progressHistory[0].timestamp)
                    - var end = new Date(process.finishedOn)
                    - var histories = process.progressHistory.filter(p => p.timestamp != null)

                    span.start-time= `${start.getHours().toString().padStart(2, '0')}:${start.getMinutes().toString().padStart(2, '0')}:${start.getSeconds().toString().padStart(2, '0')}.${start.getMilliseconds().toString().padStart(2, '0')}` 
                    span.time-spent= process.timeSpent
                    span.end-time= `${end.getHours().toString().padStart(2, '0')}:${end.getMinutes().toString().padStart(2, '0')}:${end.getSeconds().toString().padStart(2, '0')}.${end.getMilliseconds().toString().padStart(2, '0')}` 

                    - for(var i = 0; i < histories.length; i++) {
                            - var percent = (i != histories.length - 1 ? (histories[i+1].timestamp - histories[i].timestamp) / totalMili : (process.finishedOn - histories[i].timestamp) / totalMili ) * 100
                            .timeslice(class=`t${i+1}`, title = histories[i].message, style=`width:${percent}%`)= histories[i].message
                    - }

        ul.logs
            each l in logs
                li(class = l.type)
                    span= l.timestamp
                    | #{l.message}

    script.

        let PROCESS_ID = #{process.id};

        // Registering sockets
        let processSocket = io('/process-progress');

        processSocket.on('appendLog', (p) => {

            if (p.id === PROCESS_ID) {

                let logsDiv = document.querySelector('.process-page .logs');

                let li = document.createElement('li');
                li.classList.add(p.log.type);
                li.innerHTML = `<span>${p.log.timestamp}</span> ${p.log.message}`;

                logsDiv.appendChild(li);
            }
        });

        // On receiving an update from server
        processSocket.on('update', (p) => {

            if (p.id !== PROCESS_ID) return;

            let div = document.getElementById(`p-${p.id}`);
            div.classList.add(p.status);
            if (p.status !== 'running') div.classList.remove('running');

            let progress = div.querySelector('.info .progress-wrapper .progress');

            if (p.status !== 'running' && p.status !== 'pending') {
                // Hides progress bar
                progress.classList.add('hidden');
                showProgressHistory(p);
            }

            // Making the progress step bar
            if (p.progress && p.status === 'running') {
                if (progress.childElementCount == 0) { // The step progress was not created yet
                    for(let i = 0; i < p.progress.totalSteps; i++) {
                        let li = document.createElement('li');
                        li.style.width = `calc(100% / ${p.progress.totalSteps})`

                        let name = document.createElement('span');
                        name.classList.add('name');
                        name.innerHTML = '&nbsp';

                        let step = document.createElement('span');
                        step.classList.add('step');

                        li.appendChild(name);
                        li.appendChild(step);
                        
                        progress.appendChild(li);
                    }
                    progress.classList.remove('hidden');
                }

                // Update the step
                let step = p.progress.step - 1;
                progress.querySelectorAll('li').forEach((li, i) => {
                    let name = li.querySelector('.name');

                    if (i == step) {
                        li.classList.add('active');
                        name.innerHTML = p.progress.message;
                    }
                    else if (i < step) {
                        li.classList.add('done');
                        name.innerHTML ='&nbsp';
                    }
                });
            }
        });

        function showProgressHistory(p) {
            let div = document.querySelector('.progress-history');

            let totalMili = p.finishedOn - p.progressHistory[0].timestamp
            let start = new Date(p.progressHistory[0].timestamp)
            let end = new Date(p.finishedOn)
            let histories = p.progressHistory.filter(p => p.timestamp != null)

            let startStr = `${start.getHours().toString().padStart('0', 2)}:${start.getMinutes().toString().padStart('0', 2)}:${start.getSeconds().toString().padStart('0', 2)}.${start.getMilliseconds().toString().padStart('0', 2)}`;
            let endStr = `${end.getHours().toString().padStart('0', 2)}:${end.getMinutes().toString().padStart('0', 2)}:${end.getSeconds().toString().padStart('0', 2)}.${end.getMilliseconds().toString().padStart('0', 2)}`

            let timeSpent = '';
            let diff = end - start;
            if (diff >= 1000 * 60 * 60) { // more than hours
                timeSpent += `${parseInt(diff / (1000 * 60 * 60)).toString().padStart('0', 2)}h`;
                diff -= parseInt(diff / (1000 * 60 * 60));
            }

            if (diff >= 1000 * 60) { // more than minutes
                timeSpent += `${parseInt(diff / (1000 * 60)).toString().padStart('0', 2)}m`;
                diff -= parseInt(diff / (1000 * 60));
            }

            timeSpent += `${parseInt(diff / 1000).toString().padStart('0', 2)}s`;

            div.innerHTML = `
                <span class="start-time">${startStr}</span>
                <span class="time-spent">${timeSpent}</span>
                <span class="end-time">${endStr}</span>
            `; 

            for (let i = 0; i < histories.length; i++) {
                let timeslice = document.createElement('div');
                timeslice.classList.add('timeslice', `t${i + 1}`);
                timeslice.innerHTML = histories[i].message;
                timeslice.title = histories[i].message;
                timeslice.style.width = `${(i != histories.length - 1 ? (histories[i+1].timestamp - histories[i].timestamp) / totalMili : (p.finishedOn - histories[i].timestamp) / totalMili ) * 100}%`
                
                div.appendChild(timeslice);
            }

            div.classList.add('active');

        }