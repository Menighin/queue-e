extends layout

block content
    div.index-page
        .processes-container
            each p in processes
                .process(id = `p-${p.id}`, class = p.status)
                    .info
                        .title= p.name
                        .progress
                            span
                    .actions

                        .main-action
                            if p.status !== 'running' && p.status !== 'pending'
                                i.fa.fa-sync-alt(onclick=`restart(${p.id}, '${p.name}')`)
                            else
                                i.fa.fa-ban(onclick=`cancel(${p.id})`)

                        .downloads
                            a(href=`/process/downloadLog?id=${p.id}&name=${p.name}`)
                                i.fa.fa-download
                                span  Input
                            a(href=`/process/downloadLog?id=${p.id}&name=${p.name}`)
                                i.fa.fa-download
                                span  Output
                            a(href=`/process/downloadLog?id=${p.id}&name=${p.name}`)
                                i.fa.fa-download
                                span  Log
                    
    
    script.

        // Registering sockets to keep queue up to date
        let socket = io('/queue-progress');

        // On receiving an 'add' call from server
        socket.on('add', (p) => {

            let mainAction = `<i class="fa fa-ban" onclick="cancel(${p._id})"></i>`;
            if (p._status !== 'running' && p._status !== 'pending')
                mainAction = `<i class="fa fa-sync-alt" onclick="restart(${p._id}, ${p._name})"></i>`;

            let processDiv = document.createElement('div');
            processDiv.innerHTML = `
                <div class="process ${p._status}" id="p-${p._id}">
                    <div class="info">
                        <div class="title">${p._name}</div>
                        <div class="progress"><span></span></div>
                    </div>
                    <div class="actions">
                        <div class="main-action">
                            ${mainAction}
                        </div>
                        <div class="downloads">
                            <a href="/process/downloadLog?id=${p._id}&amp;name=${p._name}"><i class="fa fa-download"></i><span> Input</span></a>
                            <a href="/process/downloadLog?id=${p._id}&amp;name=${p._name}"><i class="fa fa-download"></i><span> Output</span></a>
                            <a href="/process/downloadLog?id=${p._id}&amp;name=${p._name}"><i class="fa fa-download"></i><span> Log</span></a>
                        </div>
                    </div>
                </div>
            `;

            let processContainer = document.querySelector('.processes-container');
            processContainer.prepend(processDiv);

            console.log(p);
        });

        // On receiving an update from server
        socket.on('update', (p) => {

            console.log(p);

            let div = document.getElementById(`p-${p.id}`);
            div.classList.add(p.status);

            let mainAction = div.querySelector('.main-action');

            if (p.status !== 'running' && p.status !== 'pending')
                mainAction.innerHTML = `<i class="fa fa-sync-alt" onclick="restart(${p.id}, '${p.name}')"></i>`;
            else
                mainAction.innerHTML = `<i class="fa fa-ban" onclick="cancel(${p.id})"></i>`;

            let spanUpdate = div.querySelector('.info .progress span');
            spanUpdate.innerHTML = p.progress.percent + ' - ' + p.progress.message;
            
        });
        
        // On cancel method
        function cancel(id) {
            fetch('queue/cancel', {
                method: 'post',
                body: JSON.stringify({id: id}),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
            })
            .catch((err) => {
                console.error(err);
            })
        }

        // On restart method
        function restart(id, name) {
            fetch('queue/restart', {
                method: 'post',
                body: JSON.stringify({id: id, name: name}),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
            })
            .catch((err) => {
                console.error(err);
            })
        }


    
