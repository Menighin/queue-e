extends layout

block content
    div.index-page
        .processes-container
            .process.placeholder
            each p in processes
                .process(id = `p-${p.id}`, class = p.status)
                    .info
                        .title
                            span.runnable= p.runnableName
                            br
                            | #{p.name}
                        .progress-wrapper
                            ol.progress

                        .dates-info
                            span.date-info
                                i.fa.fa-calendar-alt
                                |  #{p.createdOnDate}
                            span.date-info
                                i.fa.fa-hourglass-start
                                |  #{p.createdOnTime}
                            span.date-info
                                i.fa.fa-hourglass-half
                                |  #{p.startedOnTime}
                            span.date-info
                                i.fa.fa-hourglass-end
                                |  #{p.finishedOnTime}

                    .actions

                        .main-action
                            if p.status !== 'running' && p.status !== 'pending'
                                i.fa.fa-sync-alt(onclick=`restart(${p.id}, '${p.name}')`)
                            else
                                i.fa.fa-ban(onclick=`cancel(${p.id})`)

                        .downloads
                            a(href=`/process/downloadInput?id=${p.id}&name=${p.name}`)
                                i.fa.fa-download
                                span  Input

                            if p.status !== 'running' && p.status !== 'pending' && p.status !== 'canceled'
                                a(href=`/process/downloadLog?id=${p.id}&name=${p.name}`)
                                    i.fa.fa-download
                                    span  Output

                            a(href=`/process/downloadLog?id=${p.id}&name=${p.name}`)
                                i.fa.fa-download
                                span  Log
                    
    
    script.

        // Registering sockets to keep queue up to date
        let socket = io('/queue-progress');

        // On receiving an 'add' call from server
        socket.on('add', (p) => {
            let mainAction = `<i class="fa fa-ban" onclick="cancel(${p._id})"></i>`;
            if (p._status !== 'running' && p._status !== 'pending')
                mainAction = `<i class="fa fa-sync-alt" onclick="restart(${p._id}, ${p._name})"></i>`;

            let processDiv = document.querySelector('.process.placeholder');

            let runnableSplit = p._runnable.split('\\');
            let runnable = runnableSplit[runnableSplit.length - 1];

            processDiv.innerHTML = `
                <div class="info">
                    <div class="title">
                        <span class="runnable">${runnable}</span><br />
                        ${p._name}
                    </div>
                    <div class="progress-wrapper">
                        <ol class="progress">
                        </ol>
                    </div>
                    <div class="dates-info"></div>
                </div>
                <div class="actions">
                    <div class="main-action">
                        ${mainAction}
                    </div>
                    <div class="downloads">
                        <a href="/process/downloadInput?id=${p._id}&amp;name=${p._name}"><i class="fa fa-download"></i><span> Input</span></a>
                        <a href="/process/downloadLog?id=${p._id}&amp;name=${p._name}"><i class="fa fa-download"></i><span> Output</span></a>
                        <a href="/process/downloadLog?id=${p._id}&amp;name=${p._name}"><i class="fa fa-download"></i><span> Log</span></a>
                    </div>
                </div>
            `;
            
            // Update hidden placeholder div
            processDiv.classList.add(p._status);
            processDiv.classList.remove('placeholder');
            processDiv.id = `p-${p._id}`;

            // Create another placeholder div
            let placeholderDiv = document.createElement('div');
            placeholderDiv.classList.add('process', 'placeholder');

            let processContainer = document.querySelector('.processes-container');
            processContainer.prepend(placeholderDiv);

            console.log(p);
        });

        // On receiving an update from server
        socket.on('update', (p) => {
            console.log(p);
            let div = document.getElementById(`p-${p.id}`);
            div.classList.add(p.status);

            let mainAction = div.querySelector('.main-action');
            let progress = div.querySelector('.info .progress-wrapper .progress');
            let datesInfo = div.querySelector('.dates-info');

            if (p.status !== 'running' && p.status !== 'pending') {
                // Changes icon to restart
                mainAction.innerHTML = `<i class="fa fa-sync-alt" onclick="restart(${p.id}, '${p.name}')"></i>`;

                // Erases progress bar
                progress.innerHTML = '';

                // Put the dates
                datesInfo.innerHTML = `
                    <span class="date-info"><i class="fa fa-calendar-alt"></i> ${p.createdOnDate}</span>
                    <span class="date-info"><i class="fa fa-hourglass-start"></i> ${p.createdOnTime}</span>
                    <span class="date-info"><i class="fa fa-hourglass-half"></i> ${p.startedOnTime}</span>
                    <span class="date-info"><i class="fa fa-hourglass-end"></i> ${p.finishedOnTime}</span>
                `;
            }
            else
                mainAction.innerHTML = `<i class="fa fa-ban" onclick="cancel(${p.id})"></i>`;


            // Making the progress step bar
            if (p.progress && p.status === 'running') {
                if (progress.childElementCount == 0) { // The step progress was not created yet
                    for(let i = 0; i < p.progress.totalSteps; i++) {
                        let li = document.createElement('li');
                        li.style.width = `calc(100% / ${p.progress.totalSteps})`

                        let name = document.createElement('span');
                        name.classList.add('name');
                        name.innerHTML = '&nbsp';

                        let step = document.createElement('span');
                        step.classList.add('step');

                        li.appendChild(name);
                        li.appendChild(step);
                        
                        progress.appendChild(li);
                    }
                }

                // Update the step
                let step = p.progress.step - 1;
                progress.querySelectorAll('li').forEach((li, i) => {
                    let name = li.querySelector('.name');

                    if (i == step) {
                        li.classList.add('active');
                        name.innerHTML = p.progress.message;
                    }
                    else if (i < step) {
                        li.classList.add('done');
                        name.innerHTML ='&nbsp';
                    }
                });
            }
        });
        
        // On cancel method
        function cancel(id) {
            fetch('queue/cancel', {
                method: 'post',
                body: JSON.stringify({id: id}),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
            })
            .catch((err) => {
                console.error(err);
            })
        }

        // On restart method
        function restart(id, name) {
            fetch('queue/restart', {
                method: 'post',
                body: JSON.stringify({id: id, name: name}),
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
            })
            .catch((err) => {
                console.error(err);
            })
        }

        function formatDateToHour(mili) {
            let d = new Date(mili);
            return `${d.getHours().toString().padStart(2, '0')}:${d.getMinutes().toString().padStart(2, '0')}`;
        }

        function formatDate(mili) {
            let d = new Date(mili);
            return `${d.getFullYear()}-${(d.getMonth() + 1).toString().padStart(2, '0')}-${d.getDate().toString().padStart(2, '0')}`;
        }


    
